#pragma kernel CSMain

 
#include "Chunks/SkinnedVert.cginc"
#include "Chunks/Bone.cginc"



uniform int _Set;
uniform int _NumVerts;

RWStructuredBuffer<SkinnedVert> vertBuffer;
RWStructuredBuffer<Bone> boneBuffer;

#define NR_THREADS 64

[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  int pID = threadID + u3GroupID * NR_THREADS;

  if( pID < _NumVerts ){

    SkinnedVert vert = vertBuffer[pID];

    Bone b0 = boneBuffer[ int( vert.boneIDs[0])];
    Bone b1 = boneBuffer[ int( vert.boneIDs[1])];
    Bone b2 = boneBuffer[ int( vert.boneIDs[2])];
    Bone b3 = boneBuffer[ int( vert.boneIDs[3])];

    //float3 p0 =  mul(  b0.bindPose,float4( vert.bindPos , 1 ) ).xyz;
    float3 p0 = mul( mul(b0.transform,b0.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p1 = mul( mul(b1.transform,b1.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p2 = mul( mul(b2.transform,b2.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p3 = mul( mul(b3.transform,b3.bindPose), float4( vert.bindPos , 1 ) ).xyz;

    float3 n0 = mul( mul(b0.transform,b0.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n1 = mul( mul(b1.transform,b1.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n2 = mul( mul(b2.transform,b2.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n3 = mul( mul(b3.transform,b3.bindPose), float4( vert.bindNor , 0 ) ).xyz;
   

    float3 t0 = mul( mul(b0.transform,b0.bindPose), float4( vert.bindTan , 0 ) ).xyz;
    float3 t1 = mul( mul(b1.transform,b1.bindPose), float4( vert.bindTan , 0 ) ).xyz;
    float3 t2 = mul( mul(b2.transform,b2.bindPose), float4( vert.bindTan , 0 ) ).xyz;
    float3 t3 = mul( mul(b3.transform,b3.bindPose), float4( vert.bindTan , 0 ) ).xyz;

    float3 fPos  = p0 * vert.boneWeights[0];
           fPos += p1 * vert.boneWeights[1];
           fPos += p2 * vert.boneWeights[2];
           fPos += p3 * vert.boneWeights[3];


    float3 fNor  = n0 * vert.boneWeights[0];
           fNor += n1 * vert.boneWeights[1];
           fNor += n2 * vert.boneWeights[2];
           fNor += n3 * vert.boneWeights[3];


    float3 fTan  = t0 * vert.boneWeights[0];
           fTan += t1 * vert.boneWeights[1];
           fTan += t2 * vert.boneWeights[2];
           fTan += t3 * vert.boneWeights[3];



    vert.targetPos = fPos;

    vert.pos = vert.targetPos; 


    //float3 fPos = p0;

    //vert.pos = fPos;
    vert.nor = normalize(fNor);
    vert.tan = normalize(fTan);

    vert.debug = float3( sin(vert.bindPos.x * 100) , .3 , .3 );//float3( vert.boneWeights[0] , vert.boneWeights[1], vert.boneWeights[2] );

    vertBuffer[pID] = vert;

  }

}