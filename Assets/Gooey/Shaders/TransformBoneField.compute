#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;

int _NumBones;
int _NumBonesPerLimb;
int _NumPointsPerLimb;

struct Bone{
  float id;
  float idInBone;
  float4x4 transform;
  float4x4 bindPose;
};


struct Point{
   float distanceUp;
   float3 pos;
   float3 oPos;
   float3 nor;
   float2 uv;
   float3 debug;
};

#define pi 3.14159


RWStructuredBuffer<Bone> boneBuffer;
RWStructuredBuffer<Point> pointBuffer;




float4x4 rotationMatrix(  float3 direction,float3 up ){

    float4 row1 = float4(0,0,0,0);
    float4 row2 = float4(0,0,0,0);
    float4 row3 = float4(0,0,0,0);
    float4 row4 = float4(0,0,0,1);

    float3 x = normalize(cross(up, direction));
    float3 y = normalize(cross(direction, x));
    float3 z = normalize(direction);
  
    row1.x = x.x;
    row1.y = x.y;
    row1.z = x.z;

    row2.x = y.x;
    row2.y = y.y;
    row2.z = y.z;

    row3.x = z.x;
    row3.y = z.y;
    row3.z = z.z;


    return float4x4( row1 , row3 , row2 , row4 );

}

// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/index.htm
float4x4 rotationMatrix( float3 axis , float angle ){


  float x = axis.x;
  float y = axis.y;
  float z = axis.z;

  float c = cos( angle );
  float s = sin( angle );
  float t = 1.-c;

  float4 row1 = float4(t*x*x + c , t*x*y - z*s , t*x*z + y*s , 0.);
  float4 row2 = float4(t*x*y + z*s , t*y*y + c  ,t*y*z - x*s,0.);
  float4 row3 = float4(t*x*z - y*s , t*y*z + x*s, t*z*z + c , 0.);
  float4 row4 = float4(0,0,0,1);

  return float4x4( row1 , row3 , row2 , row4 );
}

float4x4 translationMatrix( float3 position ){


    float4 row1 = float4( 1 , 0 , 0 , position.x );
    float4 row2 = float4( 0 , 1 , 0 , position.y );
    float4 row3 = float4( 0 , 0 , 1 , position.z );
    float4 row4 = float4( 0 , 0 , 0 , 1 );

    return float4x4( row1 , row2 , row3 , row4 );

}



float4x4 scaleMatrix( float3 scale ){

    float4 row1 = float4( scale.x, 0 ,0 ,0 );
    float4 row2 = float4( 0, scale.y ,0 ,0 );
    float4 row3 = float4( 0, 0 ,scale.z,0 );
    float4 row4 = float4(0 , 0,0 ,1 );

    return float4x4( row1 , row2 , row3 , row4 );

}



#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID + u3GroupID * NR_THREADS;

  if( pID < _NumBones ){

    int limbID = pID / _NumBonesPerLimb;
    int idInLimb = pID % _NumBonesPerLimb;

    Point p1 = pointBuffer[ ( limbID * _NumPointsPerLimb ) + idInLimb ];
    Point p2 = pointBuffer[ ( limbID * _NumPointsPerLimb ) + idInLimb + 1];

    float3 dif = p2.pos - p1.pos;
    
    dif.z = -dif.z;

    Bone bone = boneBuffer[pID];

    //bone.pos = p1.pos;

    float4x4 t = translationMatrix( p1.pos );
    float4x4 r = rotationMatrix( normalize(dif) , float3(0,0,1) );
    float4x4 s = scaleMatrix(float3(.1,.1,.1) );

    bone.transform =  mul( t , mul(r,s) );




    boneBuffer[pID] = bone;

  }
  
}