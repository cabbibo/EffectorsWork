#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;

float3 _Hand;
float _SpringDistance;
int _NumVerts;
float3 _Hand1;
float3 _Hand2;

float _Trigger1;
float _Trigger2;



#include "Chunks/Vert.cginc"
#include "Chunks/noise.cginc"

float3 handForce( float3 p1 , float3 p2 , float d ){

  float3 dir = p1 - p2;
  float l = length( dir );
  dir = normalize( dir );

  float dif = 0.;
  if( l < d ){

    dif = (d-l)/ d;
  }

  return dif * -dir;

}
float4x4 _transform;
RWStructuredBuffer<Vert> vertBuffer;

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
}


#define NR_THREADS 256



#include "Chunks/interlockedAddFunctions.cginc"
RWStructuredBuffer<float4> outBuffer;
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

float4 acc = float4(0,0,0,0);

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;
  resetValue(threadID);
  int pID = threadID + u3GroupID * NR_THREADS;

  if( pID < _NumVerts ){

    Vert vert = vertBuffer[ pID ];

    //vert.pos = vert.pos;

      float3 tNorm = normalize(mul(_transform , float4( vert.nor , 0)).xyz);
      float3 tPos  = mul(_transform , float4( vert.targetPos , 1)).xyz;

    //vert.pos = tPos;//vert.targetPos * 2;

    if( _Reset == 1 ){
     // vert.oPos = basePos + baseNor * _SpringDistance * vert.uv.x;// vert.ogPos;
     // vert.pos = tPos;//vert.ogPos;

       // vert.pos = vert.pos * 100;
    }else{

      float g = 10.3;

      //baseNor = mul( _transform , float4(baseNor,0)).xyz;


      float3 force = float3(0,0,0);

          float3 dif;

    force += 2 *(-.3 + _Trigger1) *handForce( vert.pos , _Hand1 , .4);
     force += 2  *(-.3 + _Trigger2) * handForce(vert.pos , _Hand2 , .4);//(2-10*_Trigger1)* normalize( dif ) / ( 1 + 10*length(dif));// / ( 1 + length(dif));


     if( length(vert.pos - tPos ) > 0 ){
    force += -(vert.pos - tPos) * 3;
}

force *= .001;
  //  force += (2-10*_Trigger2)*normalize( dif ) / ( 1 + 10 *length(dif));


    //    vert.pos = float3( hash(vert.pos.x) , hash(vert.pos.y),hash(vert.pos.z));//00;
     //   vert.oPos = tPos;




    // Inertia: objects in motion stay in motion.
      float3 vel = vert.vel;//getVel( vert.pos , vert.oPos);

      float3 acceleration = force;

      force *= .3;
    acc = float4(force,0);


      vel += force; //_DeltaTime;

      vert.pos += vel;
      vel *= .99;
      vert.vel = vel;

     vert.nor = lerp(float3(0,1,0),normalize(vert.vel), clamp(length(vert.vel) * 10, 0, 1)) ;//normalize(vert.vel);
      //vert.vel = vel;
     // vert.pos = next;


    }


    vertBuffer[pID] = vert;

  }

    interlockedAddFloat4( acc , threadID );

  if( threadID == 0 ){
    outBuffer[ u3GroupID.x ] = interlockedFullValue;
  }


}
