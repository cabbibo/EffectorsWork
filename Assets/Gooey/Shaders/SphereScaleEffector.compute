#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;


int _NumMeshes;


float _Power;
float3 _EffectorPosition;
float3 _EffectorScale;

#include "Chunks/Mesh.cginc"
#include "Chunks/SkinnedVert.cginc"



#define pi 3.14159


RWStructuredBuffer<Mesh> basisBuffer;


#include "Chunks/translationMatrix.cginc"
#include "Chunks/rotationMatrix.cginc"
#include "Chunks/scaleMatrix.cginc"


#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID + u3GroupID * NR_THREADS;



  if( pID < _NumMeshes ){

    Mesh basis = basisBuffer[ pID ];


    float3 basePos = mul( basis.transform, float4(0,0,0,1)).xyz;


    float scale = 1/(.3+length((basePos - _EffectorPosition)/_EffectorScale));

    scale = lerp( 1 , scale , _Power );
    float4x4 s = scaleMatrix(float3(scale,scale,scale));

    basis.transform = mul( basis.transform , s  );

    basisBuffer[pID] = basis;

  }
  
}