#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;

float3 _Hand;
float _SpringDistance;
int _NumVerts;
float3 _Hand1;
float3 _Hand2;

float _Trigger1;
float _Trigger2;
float3 handForce( float3 p1 , float3 p2 , float d ){

  float3 dir = p1 - p2;
  float l = length( dir );
  dir = normalize( dir );

  float dif = 0.;
  if( l < d ){

    dif = (d-l)/ d;
  }

  return dif * -dir;

}


float _HandRepelRadius;
float _HandRepelStrength;

#include "Chunks/Vert.cginc"
#include "Chunks/HairVert.cginc"
float4x4 _transform;

RWStructuredBuffer<HairVert> hairBuffer;
RWStructuredBuffer<Vert> baseBuffer;

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
}


#define NR_THREADS 256
#include "Chunks/interlockedAddFunctions.cginc"
#include "Chunks/noise.cginc"

RWStructuredBuffer<float4> outBuffer;
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  resetValue( threadID );
  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID + u3GroupID * NR_THREADS;


float2 cV = float2(10000000,0);

  if( pID < _NumVerts ){

    HairVert vert = hairBuffer[ pID ];

    Vert b1 = baseBuffer[(int)vert.triIDs.x];
    Vert b2 = baseBuffer[(int)vert.triIDs.y];
    Vert b3 = baseBuffer[(int)vert.triIDs.z];


    float3 basePos = b1.pos * vert.triWeights.x + b2.pos * vert.triWeights.y + b3.pos * vert.triWeights.z;
    float3 baseNor = b1.nor * vert.triWeights.x + b2.nor * vert.triWeights.y + b3.nor * vert.triWeights.z;

    if( _Reset == 1 ){
      vert.oPos = basePos + baseNor * _SpringDistance * vert.uv.x;// vert.ogPos;
      vert.pos = basePos + baseNor * _SpringDistance * vert.uv.x;//vert.ogPos;
    }else{


      //float3 tNorm = mul( transformMatrix[0] , float4( vert.norm , 0)).xyz;
      float g = 10.3;



      baseNor = normalize(mul( _transform , float4(baseNor,0)).xyz);


      float3 force = baseNor;

      force += float3(0,0,1) * (noise( vert.pos * 20 + float3(0,0,_Time))-.5);
       force += float3(1,0,0) * (noise( vert.pos * 23 + 10 + float3(0,0,_Time))-.5);

      float3 tPos = mul( _transform , float4( basePos , 1)).xyz;


      if( vert.uv.x == 0 ){

        vert.pos = tPos;
        vert.oPos = tPos;
      }


    // Inertia: objects in motion stay in motion.
      float3 vel = getVel( vert.pos , vert.oPos);

    force +=_HandRepelStrength*(-.3 + _Trigger1) *handForce( vert.pos , _Hand1 , _HandRepelRadius);
    force +=_HandRepelStrength *(-.3 + _Trigger2) * handForce(vert.pos , _Hand2 , _HandRepelRadius);//(2-10*_Trigger1)* normalize( dif ) / ( 1 + 10*length(dif));// / ( 1 + length(dif));

    float3 dif;
    float l ;

    dif = vert.pos - _Hand1;
    l = length( dif );
    dif = vert.pos - _Hand2;
    if( length( dif ) < l ){
      l = length( dif);
    }

    cV.x = l;
    cV.y = float( pID );


      float3 acceleration = force;

      float dampening = .85;//.99999;// - vert.life * .01;
      float3 next = vert.pos + vel * dampening + acceleration * _DeltaTime * _DeltaTime;

      vert.oPos = vert.pos;
      vert.pos = next;
      vert.vel = vel;

      if( vert.uv.x == 0 ){
        //float3 tPos = mul( transformMatrix[0] , float4( vert.ogPos , 1)).xyz;
        vert.pos = tPos;
        vert.oPos = tPos;
      }

    }

    hairBuffer[pID] = vert;

  }

  interlockedClosestLength( cV , threadID );

  if( threadID == 0 ){
    outBuffer[ u3GroupID.x ] = interlockedFullValue;
  }

}
