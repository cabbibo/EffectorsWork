#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;


int _NumMeshes;

float _NoiseBase;
float _NoiseSize;
float _NoiseScale;
float _NoiseSpeed;

#include "Chunks/Mesh.cginc"
#include "Chunks/SkinnedVert.cginc"


#define pi 3.14159


RWStructuredBuffer<Mesh> basisBuffer;
RWStructuredBuffer<SkinnedVert> vertBuffer;

#include "Chunks/rotationMatrix.cginc"
#include "Chunks/scaleMatrix.cginc"
#include "Chunks/translationMatrix.cginc"


#include "Chunks/noise.cginc"



#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID + u3GroupID * NR_THREADS;



  if( pID < _NumMeshes ){



    Mesh basis = basisBuffer[ pID ];

    SkinnedVert b1 = vertBuffer[(int)basis.triIDs.x];
    SkinnedVert b2 = vertBuffer[(int)basis.triIDs.y];
    SkinnedVert b3 = vertBuffer[(int)basis.triIDs.z];


    float3 basePos = b1.pos * basis.triWeights.x + b2.pos * basis.triWeights.y + b3.pos * basis.triWeights.z;

    float scale = noise( basePos * _NoiseSize + float3( 0 , _Time * _NoiseSpeed , 0 ) );
    scale = (scale + _NoiseBase ) * _NoiseScale;

    float4x4 s = scaleMatrix(float3(scale,scale,scale));

    basis.transform = mul( basis.transform , s  );

    basisBuffer[pID] = basis;


  }
  
}