#pragma kernel CSMain

int _NumberThreads;
int _NumVerts;

int _VertsPerHair;
float _SpringDistance;
int _PassID;


#include "Chunks/HairVert.cginc"

RWStructuredBuffer<HairVert> vertBuffer;

#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  // Get the id using thread / group indices
  int pID = threadID + u3GroupID * NR_THREADS;

  pID =  pID * 2;
  pID = pID + _PassID;


    //pID += _PassID;
    //pID *= 2;

  if( pID < _NumVerts ){

    HairVert v1 = vertBuffer[pID];

    //v1.debug = float3( 1,1,1);
    if( v1.uv.x >= (float(_VertsPerHair-1)/float(_VertsPerHair))){
      v1.debug = float3( 1 , 1 , 1 );
      vertBuffer[ pID ] = v1;

    }else{
      
      HairVert v2 = vertBuffer[ pID + 1 ];

      float3 dif = v1.pos - v2.pos;
      float l = length( dif );

      float difference = ((_SpringDistance ) - l ) / l;

      float3 translate = dif * .5 * difference;// /  float( _WhichOne + 1)
      float3 t1 = 1 * translate; // vert.mass;
      float3 t2 = 1 * translate; // vert2.mass;
      
      float3 n1 = v1.pos + t1;
      float3 n2 = v2.pos - t2;

      if( v1.uv.x != 0){
        v1.pos = n1;
        v2.pos = n2;
      }else{
        v1.pos = v1.pos;
        // If its at the base, move it without moving bottom
        v2.pos = n2-t2;
      }

    
      vertBuffer[ pID ] = v1;
      vertBuffer[ pID + 1 ] = v2;

    }

  }



  
}