#pragma kernel CSMain

float _DeltaTime;
float _Time;
int _Reset;

int _NumPoints;

struct Vert{
   float distanceUp;
   float3 pos;
   float3 oPos;
   float3 nor;
   float2 uv;
   float3 debug;
};



#include "Chunks/noise.cginc"

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
}


RWStructuredBuffer<Vert> pointBuffer;

#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  //int pID = id.x + id.y * gridX + id.z * gridX * gridY;

  int pID = threadID + u3GroupID * NR_THREADS;

  if( pID < _NumPoints){

    Vert vert = pointBuffer[ pID ];

    if( _Reset == 1 ){
vert.pos = vert.pos;
    }else{


       if( vert.uv.y == 0 ){

           //float3 tPos = mul( transformMatrix[0] , float4( vert.ogPos , 1)).xyz;
        vert.pos = vert.pos;
        vert.oPos = vert.oPos;

      }else{

        Vert vertD = pointBuffer[ pID - 1 ];

      //float3 tNorm = mul( transformMatrix[0] , float4( vert.norm , 0)).xyz;
      float g = 10.3;


      float3 force = vert.nor  * 3 + float3( 0 , 1, 0) * g;


      //float3 tPos = mul( _transform , float4( vert.pos , 1)).xyz;

      force += 8 * float3(noise(vert.pos* 13 +_Time) - .5 , 0 , noise(vert.pos * 10 +_Time)-.5);

      force += 50. * (vertD.pos - vert.pos);


    // Inertia: objects in motion stay in motion.
      float3 vel = getVel( vert.pos , vert.oPos);

      float3 acceleration = force;

      float dampening = .85;//.99999;// - vert.life * .01;
      float3 next = vert.pos + vel * dampening + acceleration * _DeltaTime * _DeltaTime;


      //vert.vel = vel;
        vert.oPos = vert.pos;
        vert.pos = next;


      }



    }

    pointBuffer[pID] = vert;

  }

}

