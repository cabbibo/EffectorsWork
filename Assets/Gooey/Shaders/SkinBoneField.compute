#pragma kernel CSMain

 
struct Vert{

  float  whichBone;

  float3 pos;
  float3 vel;
  float3 nor;
  float2 uv;

  float3 targetPos;

  float3 bindPos;
  float3 bindNor;
  float4 boneWeights;
  float4 boneIDs;
  float3 debug;
};

struct Bone{
  float id;
  float idInBone;
  float4x4 transform;
  float4x4 bindPose;
};


int _NumVerts;
int _NumBonesPerLimb;  

RWStructuredBuffer<Vert> vertBuffer;
RWStructuredBuffer<Bone> boneBuffer;

#define NR_THREADS 64

[numthreads(NR_THREADS,1,1)]
void CSMain (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {
  
  int pID = threadID + u3GroupID * NR_THREADS;

  if( pID < _NumVerts ){

    Vert vert = vertBuffer[pID];

    Bone b0 = boneBuffer[ int(vert.boneIDs[0]) + vert.whichBone * _NumBonesPerLimb ];
    Bone b1 = boneBuffer[ int(vert.boneIDs[1]) + vert.whichBone * _NumBonesPerLimb ];
    Bone b2 = boneBuffer[ int(vert.boneIDs[2]) + vert.whichBone * _NumBonesPerLimb ];
    Bone b3 = boneBuffer[ int(vert.boneIDs[3]) + vert.whichBone * _NumBonesPerLimb ];



    //float3 p0 =  mul(  b0.bindPose,float4( vert.bindPos , 1 ) ).xyz;
    float3 p0 = mul(mul(b0.transform,b0.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p1 = mul(mul(b1.transform,b1.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p2 = mul(mul(b2.transform,b2.bindPose), float4( vert.bindPos , 1 ) ).xyz;
    float3 p3 = mul(mul(b3.transform,b3.bindPose), float4( vert.bindPos , 1 ) ).xyz;

    float3 n0 = mul( mul(b0.transform,b0.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n1 = mul( mul(b1.transform,b1.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n2 = mul( mul(b2.transform,b2.bindPose), float4( vert.bindNor , 0 ) ).xyz;
    float3 n3 = mul( mul(b3.transform,b3.bindPose), float4( vert.bindNor , 0 ) ).xyz;
   

    float3 fPos  = p0 * vert.boneWeights[0];
           fPos += p1 * vert.boneWeights[1];
           fPos += p2 * vert.boneWeights[2];
           fPos += p3 * vert.boneWeights[3];


    float3 fNor  = n0 * vert.boneWeights[0];
           fNor += n1 * vert.boneWeights[1];
           fNor += n2 * vert.boneWeights[2];
           fNor += n3 * vert.boneWeights[3];


    vert.targetPos = fPos;

    vert.pos = vert.targetPos;


    //float3 fPos = p0;

    //vert.pos = fPos;
    vert.nor = normalize(fNor);

    vert.debug = float3( 1 , .3 , .3 );//float3( vert.boneWeights[0] , vert.boneWeights[1], vert.boneWeights[2] );

    vertBuffer[pID] = vert;

  }

}